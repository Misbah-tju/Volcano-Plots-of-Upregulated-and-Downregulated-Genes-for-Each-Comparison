#!/usr/bin/env python3
"""
Custom Volcano Plot Generator - Generated by Web Customizer
=========================================================
Customized volcano plot for MG72 vs MG24 gene expression analysis
Generated on: 5/28/2025
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import matplotlib
matplotlib.use('Agg')  # Set backend for headless operation

def create_custom_volcano_plot():
    """Create customized volcano plot with user-defined parameters."""
    
    # Configuration from web interface
    config = {
        'width': 12,
        'height': 10,
        'dpi': 300,
        'colors': {
            'upregulated': '#ff4444',
            'downregulated': '#00cccc',
            'nonsignificant': '#cccccc',
            'threshold': '#000000',
            'background': '#ffffff'
        },
        'fonts': {
            'title': 16,
            'axis': 14,
            'legend': 12,
            'stats': 11
        },
        'points': {
            'size': 20,
            'alpha': 0.6,
            'border': 0
        },
        'thresholds': {
            'fc': 1,
            'pval': 0.05,
            'line_width': 1.5
        },
        'labels': {
            'title': """Volcano Plot: All Genes (Complete Dataset)
(MG72 vs MG24 - 17,437 genes)""",
            'x': 'log‚ÇÇ(Fold Change)',
            'y': '-log‚ÇÅ‚ÇÄ(P-value)'
        },
        'output_filename': 'custom_volcano_plot'
    }
    
    print("üß¨ Custom Volcano Plot Generator")
    print("=" * 50)
    
    # Load data
    print("üìÇ Loading Excel file...")
    file_path = 'Data for Making Graph/MG72VSMG24_Gene_differential_expression.xlsx'
    
    try:
        df = pd.read_excel(file_path)
        print(f"‚úÖ Loaded {len(df):,} genes from Excel file")
    except Exception as e:
        print(f"‚ùå Error loading data: {e}")
        return None
    
    # Prepare data
    print("üßπ Preparing data...")
    data = df[['gene_name', 'log2(fc)', 'pval']].copy()
    data = data.dropna(subset=['log2(fc)', 'pval'])
    print(f"‚úÖ Clean dataset: {len(data):,} genes")
    
    # Handle zero p-values and calculate -log10(p-value)
    data['pval_adj'] = data['pval'].replace(0, 1e-300)
    data['-log10(pval)'] = -np.log10(data['pval_adj'])
    
    # Categorize genes based on thresholds
    data['category'] = 'Not Significant'
    upregulated = (data['log2(fc)'] >= config['thresholds']['fc']) & (data['pval'] <= config['thresholds']['pval'])
    downregulated = (data['log2(fc)'] <= -config['thresholds']['fc']) & (data['pval'] <= config['thresholds']['pval'])
    
    data.loc[upregulated, 'category'] = 'Upregulated'
    data.loc[downregulated, 'category'] = 'Downregulated'
    
    # Count categories
    stats = data['category'].value_counts()
    print(f"üìä Gene Categories:")
    print(f"   ‚Ä¢ Upregulated: {stats.get('Upregulated', 0):,}")
    print(f"   ‚Ä¢ Downregulated: {stats.get('Downregulated', 0):,}")
    print(f"   ‚Ä¢ Not Significant: {stats.get('Not Significant', 0):,}")
    
    # Create the plot
    print("üé® Creating custom volcano plot...")
    plt.style.use('default')
    fig, ax = plt.subplots(figsize=(config['width'], config['height']))
    fig.patch.set_facecolor(config['colors']['background'])
    ax.set_facecolor(config['colors']['background'])
    
    # Plot points by category
    for category in ['Not Significant', 'Downregulated', 'Upregulated']:
        subset = data[data['category'] == category]
        if not subset.empty:
            alpha = config['points']['alpha'] if category != 'Not Significant' else config['points']['alpha'] * 0.7
            size = config['points']['size'] if category != 'Not Significant' else config['points']['size'] * 0.8
            
            ax.scatter(subset['log2(fc)'], subset['-log10(pval)'], 
                      c=config['colors'][category.lower().replace(' ', '')], 
                      alpha=alpha, s=size, label=category, 
                      edgecolors='black' if config['points']['border'] > 0 else 'none',
                      linewidths=config['points']['border'])
    
    # Add threshold lines
    ax.axvline(x=config['thresholds']['fc'], color=config['colors']['threshold'], 
               linestyle='--', alpha=0.7, linewidth=config['thresholds']['line_width'])
    ax.axvline(x=-config['thresholds']['fc'], color=config['colors']['threshold'], 
               linestyle='--', alpha=0.7, linewidth=config['thresholds']['line_width'])
    ax.axhline(y=-np.log10(config['thresholds']['pval']), color=config['colors']['threshold'], 
               linestyle='--', alpha=0.7, linewidth=config['thresholds']['line_width'])
    
    # Customize labels and title
    ax.set_xlabel(config['labels']['x'], fontsize=config['fonts']['axis'], fontweight='bold')
    ax.set_ylabel(config['labels']['y'], fontsize=config['fonts']['axis'], fontweight='bold')
    ax.set_title(config['labels']['title'], fontsize=config['fonts']['title'], fontweight='bold', pad=20)
    
    # Add grid
    ax.grid(True, alpha=0.3, linestyle='-', linewidth=0.5)
    
    # Add legend
    legend = ax.legend(loc='upper right', frameon=True, fancybox=True, shadow=True, 
                      fontsize=config['fonts']['legend'])
    legend.get_frame().set_facecolor('white')
    legend.get_frame().set_alpha(0.9)
    
    # Add statistics text box
    total_genes = len(data)
    upregulated_count = stats.get('Upregulated', 0)
    downregulated_count = stats.get('Downregulated', 0)
    not_significant_count = stats.get('Not Significant', 0)
    
    stats_text = f"""Dataset Statistics:
Total genes: {total_genes:,}
Upregulated: {upregulated_count:,} ({upregulated_count/total_genes*100:.1f}%)
Downregulated: {downregulated_count:,} ({downregulated_count/total_genes*100:.1f}%)
Not significant: {not_significant_count:,} ({not_significant_count/total_genes*100:.1f}%)

Significance Thresholds:
|log‚ÇÇ(FC)| ‚â• {config['thresholds']['fc']}
p-value ‚â§ {config['thresholds']['pval']}"""
    
    ax.text(0.02, 0.98, stats_text, transform=ax.transAxes, fontsize=config['fonts']['stats'],
            verticalalignment='top', bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.9))
    
    # Set axis limits with padding
    x_min, x_max = data['log2(fc)'].min(), data['log2(fc)'].max()
    y_max = data['-log10(pval)'].max()
    
    ax.set_xlim(x_min - 0.5, x_max + 0.5)
    ax.set_ylim(-0.5, y_max + 5)
    
    # Improve layout
    plt.tight_layout()
    
    # Save plots
    print("üíæ Saving custom volcano plot...")
    png_file = f"{config['output_filename']}.png"
    pdf_file = f"{config['output_filename']}.pdf"
    
    plt.savefig(png_file, dpi=config['dpi'], bbox_inches='tight', facecolor=config['colors']['background'])
    plt.savefig(pdf_file, bbox_inches='tight', facecolor=config['colors']['background'])
    
    print(f"‚úÖ Saved PNG: {png_file}")
    print(f"‚úÖ Saved PDF: {pdf_file}")
    
    # Close plot to free memory
    plt.close(fig)
    
    print("\nüéâ Custom volcano plot generation completed!")
    print(f"\nüìà Summary:")
    print(f"   ‚Ä¢ Total genes analyzed: {total_genes:,}")
    print(f"   ‚Ä¢ Significantly upregulated: {upregulated_count:,}")
    print(f"   ‚Ä¢ Significantly downregulated: {downregulated_count:,}")
    print(f"   ‚Ä¢ Total significant genes: {upregulated_count + downregulated_count:,}")
    print(f"   ‚Ä¢ Percentage significant: {((upregulated_count + downregulated_count)/total_genes)*100:.1f}%")
    
    return data

if __name__ == "__main__":
    result = create_custom_volcano_plot()
    if result is not None:
        print("\n‚úÖ Custom volcano plot analysis completed successfully!")
    else:
        print("\n‚ùå Custom volcano plot analysis failed!")